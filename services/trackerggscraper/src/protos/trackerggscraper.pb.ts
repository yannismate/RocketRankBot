// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: src/protos/trackerggscraper.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import { BinaryReader, BinaryWriter } from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

export type PlayerPlatform = "EPIC" | "STEAM" | "PSN" | "XBL";

export type RankPlaylist =
  | "UNRANKED"
  | "RANKED_1V1"
  | "RANKED_2V2"
  | "RANKED_3V3"
  | "HOOPS"
  | "RUMBLE"
  | "DROPSHOT"
  | "SNOWDAY"
  | "TOURNAMENTS";

export interface PlayerCurrentRanksReq {
  platform: PlayerPlatform;
  identifier: string;
}

export interface PlayerCurrentRanksRes {
  displayName: string;
  ranks: PlayerRank[];
}

export interface PlayerRank {
  playlist: RankPlaylist;
  mmr: number;
  rank: number;
  division: number;
}

//========================================//
//    TrackerGgScraper Protobuf Client    //
//========================================//

export async function PlayerCurrentRanks(
  playerCurrentRanksReq: PlayerCurrentRanksReq,
  config?: ClientConfiguration,
): Promise<PlayerCurrentRanksRes> {
  const response = await PBrequest(
    "/github.com.yannismate.rocketrankbot.trackerggscraper.TrackerGgScraper/PlayerCurrentRanks",
    PlayerCurrentRanksReq.encode(playerCurrentRanksReq),
    config,
  );
  return PlayerCurrentRanksRes.decode(response);
}

//========================================//
//      TrackerGgScraper JSON Client      //
//========================================//

export async function PlayerCurrentRanksJSON(
  playerCurrentRanksReq: PlayerCurrentRanksReq,
  config?: ClientConfiguration,
): Promise<PlayerCurrentRanksRes> {
  const response = await JSONrequest(
    "/github.com.yannismate.rocketrankbot.trackerggscraper.TrackerGgScraper/PlayerCurrentRanks",
    PlayerCurrentRanksReqJSON.encode(playerCurrentRanksReq),
    config,
  );
  return PlayerCurrentRanksResJSON.decode(response);
}

//========================================//
//            TrackerGgScraper            //
//========================================//

export interface TrackerGgScraper<Context = unknown> {
  PlayerCurrentRanks: (
    playerCurrentRanksReq: PlayerCurrentRanksReq,
    context: Context,
  ) => Promise<PlayerCurrentRanksRes> | PlayerCurrentRanksRes;
}

export function createTrackerGgScraper<Context>(
  service: TrackerGgScraper<Context>,
) {
  return {
    name: "github.com.yannismate.rocketrankbot.trackerggscraper.TrackerGgScraper",
    methods: {
      PlayerCurrentRanks: {
        name: "PlayerCurrentRanks",
        handler: service.PlayerCurrentRanks,
        input: {
          protobuf: PlayerCurrentRanksReq,
          json: PlayerCurrentRanksReqJSON,
        },
        output: {
          protobuf: PlayerCurrentRanksRes,
          json: PlayerCurrentRanksResJSON,
        },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const PlayerPlatform = {
  EPIC: "EPIC",
  STEAM: "STEAM",
  PSN: "PSN",
  XBL: "XBL",
  /**
   * @private
   */
  _fromInt: function (i: number): PlayerPlatform {
    switch (i) {
      case 0: {
        return "EPIC";
      }
      case 1: {
        return "STEAM";
      }
      case 2: {
        return "PSN";
      }
      case 3: {
        return "XBL";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as PlayerPlatform;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: PlayerPlatform): number {
    switch (i) {
      case "EPIC": {
        return 0;
      }
      case "STEAM": {
        return 1;
      }
      case "PSN": {
        return 2;
      }
      case "XBL": {
        return 3;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const RankPlaylist = {
  UNRANKED: "UNRANKED",
  RANKED_1V1: "RANKED_1V1",
  RANKED_2V2: "RANKED_2V2",
  RANKED_3V3: "RANKED_3V3",
  HOOPS: "HOOPS",
  RUMBLE: "RUMBLE",
  DROPSHOT: "DROPSHOT",
  SNOWDAY: "SNOWDAY",
  TOURNAMENTS: "TOURNAMENTS",
  /**
   * @private
   */
  _fromInt: function (i: number): RankPlaylist {
    switch (i) {
      case 0: {
        return "UNRANKED";
      }
      case 1: {
        return "RANKED_1V1";
      }
      case 2: {
        return "RANKED_2V2";
      }
      case 3: {
        return "RANKED_3V3";
      }
      case 4: {
        return "HOOPS";
      }
      case 5: {
        return "RUMBLE";
      }
      case 6: {
        return "DROPSHOT";
      }
      case 7: {
        return "SNOWDAY";
      }
      case 8: {
        return "TOURNAMENTS";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as RankPlaylist;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: RankPlaylist): number {
    switch (i) {
      case "UNRANKED": {
        return 0;
      }
      case "RANKED_1V1": {
        return 1;
      }
      case "RANKED_2V2": {
        return 2;
      }
      case "RANKED_3V3": {
        return 3;
      }
      case "HOOPS": {
        return 4;
      }
      case "RUMBLE": {
        return 5;
      }
      case "DROPSHOT": {
        return 6;
      }
      case "SNOWDAY": {
        return 7;
      }
      case "TOURNAMENTS": {
        return 8;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const PlayerCurrentRanksReq = {
  /**
   * Serializes PlayerCurrentRanksReq to protobuf.
   */
  encode: function (msg: PartialDeep<PlayerCurrentRanksReq>): Uint8Array {
    return PlayerCurrentRanksReq._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes PlayerCurrentRanksReq from protobuf.
   */
  decode: function (bytes: ByteSource): PlayerCurrentRanksReq {
    return PlayerCurrentRanksReq._readMessage(
      PlayerCurrentRanksReq.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes PlayerCurrentRanksReq with all fields set to their default value.
   */
  initialize: function (): PlayerCurrentRanksReq {
    return {
      platform: PlayerPlatform._fromInt(0),
      identifier: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PlayerCurrentRanksReq>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.platform && PlayerPlatform._toInt(msg.platform)) {
      writer.writeEnum(1, PlayerPlatform._toInt(msg.platform));
    }
    if (msg.identifier) {
      writer.writeString(2, msg.identifier);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PlayerCurrentRanksReq,
    reader: BinaryReader,
  ): PlayerCurrentRanksReq {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.platform = PlayerPlatform._fromInt(reader.readEnum());
          break;
        }
        case 2: {
          msg.identifier = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PlayerCurrentRanksRes = {
  /**
   * Serializes PlayerCurrentRanksRes to protobuf.
   */
  encode: function (msg: PartialDeep<PlayerCurrentRanksRes>): Uint8Array {
    return PlayerCurrentRanksRes._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes PlayerCurrentRanksRes from protobuf.
   */
  decode: function (bytes: ByteSource): PlayerCurrentRanksRes {
    return PlayerCurrentRanksRes._readMessage(
      PlayerCurrentRanksRes.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes PlayerCurrentRanksRes with all fields set to their default value.
   */
  initialize: function (): PlayerCurrentRanksRes {
    return {
      displayName: "",
      ranks: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PlayerCurrentRanksRes>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.displayName) {
      writer.writeString(1, msg.displayName);
    }
    if (msg.ranks?.length) {
      writer.writeRepeatedMessage(
        2,
        msg.ranks as any,
        PlayerRank._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PlayerCurrentRanksRes,
    reader: BinaryReader,
  ): PlayerCurrentRanksRes {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.displayName = reader.readString();
          break;
        }
        case 2: {
          const m = PlayerRank.initialize();
          reader.readMessage(m, PlayerRank._readMessage);
          msg.ranks.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PlayerRank = {
  /**
   * Serializes PlayerRank to protobuf.
   */
  encode: function (msg: PartialDeep<PlayerRank>): Uint8Array {
    return PlayerRank._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes PlayerRank from protobuf.
   */
  decode: function (bytes: ByteSource): PlayerRank {
    return PlayerRank._readMessage(
      PlayerRank.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes PlayerRank with all fields set to their default value.
   */
  initialize: function (): PlayerRank {
    return {
      playlist: RankPlaylist._fromInt(0),
      mmr: 0,
      rank: 0,
      division: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PlayerRank>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.playlist && RankPlaylist._toInt(msg.playlist)) {
      writer.writeEnum(1, RankPlaylist._toInt(msg.playlist));
    }
    if (msg.mmr) {
      writer.writeInt32(2, msg.mmr);
    }
    if (msg.rank) {
      writer.writeInt32(3, msg.rank);
    }
    if (msg.division) {
      writer.writeInt32(4, msg.division);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: PlayerRank, reader: BinaryReader): PlayerRank {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.playlist = RankPlaylist._fromInt(reader.readEnum());
          break;
        }
        case 2: {
          msg.mmr = reader.readInt32();
          break;
        }
        case 3: {
          msg.rank = reader.readInt32();
          break;
        }
        case 4: {
          msg.division = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const PlayerPlatformJSON = {
  EPIC: "EPIC",
  STEAM: "STEAM",
  PSN: "PSN",
  XBL: "XBL",
  /**
   * @private
   */
  _fromInt: function (i: number): PlayerPlatform {
    switch (i) {
      case 0: {
        return "EPIC";
      }
      case 1: {
        return "STEAM";
      }
      case 2: {
        return "PSN";
      }
      case 3: {
        return "XBL";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as PlayerPlatform;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: PlayerPlatform): number {
    switch (i) {
      case "EPIC": {
        return 0;
      }
      case "STEAM": {
        return 1;
      }
      case "PSN": {
        return 2;
      }
      case "XBL": {
        return 3;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const RankPlaylistJSON = {
  UNRANKED: "UNRANKED",
  RANKED_1V1: "RANKED_1V1",
  RANKED_2V2: "RANKED_2V2",
  RANKED_3V3: "RANKED_3V3",
  HOOPS: "HOOPS",
  RUMBLE: "RUMBLE",
  DROPSHOT: "DROPSHOT",
  SNOWDAY: "SNOWDAY",
  TOURNAMENTS: "TOURNAMENTS",
  /**
   * @private
   */
  _fromInt: function (i: number): RankPlaylist {
    switch (i) {
      case 0: {
        return "UNRANKED";
      }
      case 1: {
        return "RANKED_1V1";
      }
      case 2: {
        return "RANKED_2V2";
      }
      case 3: {
        return "RANKED_3V3";
      }
      case 4: {
        return "HOOPS";
      }
      case 5: {
        return "RUMBLE";
      }
      case 6: {
        return "DROPSHOT";
      }
      case 7: {
        return "SNOWDAY";
      }
      case 8: {
        return "TOURNAMENTS";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as RankPlaylist;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: RankPlaylist): number {
    switch (i) {
      case "UNRANKED": {
        return 0;
      }
      case "RANKED_1V1": {
        return 1;
      }
      case "RANKED_2V2": {
        return 2;
      }
      case "RANKED_3V3": {
        return 3;
      }
      case "HOOPS": {
        return 4;
      }
      case "RUMBLE": {
        return 5;
      }
      case "DROPSHOT": {
        return 6;
      }
      case "SNOWDAY": {
        return 7;
      }
      case "TOURNAMENTS": {
        return 8;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const PlayerCurrentRanksReqJSON = {
  /**
   * Serializes PlayerCurrentRanksReq to JSON.
   */
  encode: function (msg: PartialDeep<PlayerCurrentRanksReq>): string {
    return JSON.stringify(PlayerCurrentRanksReqJSON._writeMessage(msg));
  },

  /**
   * Deserializes PlayerCurrentRanksReq from JSON.
   */
  decode: function (json: string): PlayerCurrentRanksReq {
    return PlayerCurrentRanksReqJSON._readMessage(
      PlayerCurrentRanksReqJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes PlayerCurrentRanksReq with all fields set to their default value.
   */
  initialize: function (): PlayerCurrentRanksReq {
    return {
      platform: PlayerPlatform._fromInt(0),
      identifier: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PlayerCurrentRanksReq>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.platform && PlayerPlatformJSON._toInt(msg.platform)) {
      json["platform"] = msg.platform;
    }
    if (msg.identifier) {
      json["identifier"] = msg.identifier;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PlayerCurrentRanksReq,
    json: any,
  ): PlayerCurrentRanksReq {
    const _platform_ = json["platform"];
    if (_platform_) {
      msg.platform = _platform_;
    }
    const _identifier_ = json["identifier"];
    if (_identifier_) {
      msg.identifier = _identifier_;
    }
    return msg;
  },
};

export const PlayerCurrentRanksResJSON = {
  /**
   * Serializes PlayerCurrentRanksRes to JSON.
   */
  encode: function (msg: PartialDeep<PlayerCurrentRanksRes>): string {
    return JSON.stringify(PlayerCurrentRanksResJSON._writeMessage(msg));
  },

  /**
   * Deserializes PlayerCurrentRanksRes from JSON.
   */
  decode: function (json: string): PlayerCurrentRanksRes {
    return PlayerCurrentRanksResJSON._readMessage(
      PlayerCurrentRanksResJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes PlayerCurrentRanksRes with all fields set to their default value.
   */
  initialize: function (): PlayerCurrentRanksRes {
    return {
      displayName: "",
      ranks: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PlayerCurrentRanksRes>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.displayName) {
      json["displayName"] = msg.displayName;
    }
    if (msg.ranks?.length) {
      json["ranks"] = msg.ranks.map(PlayerRankJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PlayerCurrentRanksRes,
    json: any,
  ): PlayerCurrentRanksRes {
    const _displayName_ = json["displayName"];
    if (_displayName_) {
      msg.displayName = _displayName_;
    }
    const _ranks_ = json["ranks"];
    if (_ranks_) {
      for (const item of _ranks_) {
        const m = PlayerRankJSON.initialize();
        PlayerRankJSON._readMessage(m, item);
        msg.ranks.push(m);
      }
    }
    return msg;
  },
};

export const PlayerRankJSON = {
  /**
   * Serializes PlayerRank to JSON.
   */
  encode: function (msg: PartialDeep<PlayerRank>): string {
    return JSON.stringify(PlayerRankJSON._writeMessage(msg));
  },

  /**
   * Deserializes PlayerRank from JSON.
   */
  decode: function (json: string): PlayerRank {
    return PlayerRankJSON._readMessage(
      PlayerRankJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes PlayerRank with all fields set to their default value.
   */
  initialize: function (): PlayerRank {
    return {
      playlist: RankPlaylist._fromInt(0),
      mmr: 0,
      rank: 0,
      division: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PlayerRank>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.playlist && RankPlaylistJSON._toInt(msg.playlist)) {
      json["playlist"] = msg.playlist;
    }
    if (msg.mmr) {
      json["mmr"] = msg.mmr;
    }
    if (msg.rank) {
      json["rank"] = msg.rank;
    }
    if (msg.division) {
      json["division"] = msg.division;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: PlayerRank, json: any): PlayerRank {
    const _playlist_ = json["playlist"];
    if (_playlist_) {
      msg.playlist = _playlist_;
    }
    const _mmr_ = json["mmr"];
    if (_mmr_) {
      msg.mmr = _mmr_;
    }
    const _rank_ = json["rank"];
    if (_rank_) {
      msg.rank = _rank_;
    }
    const _division_ = json["division"];
    if (_division_) {
      msg.division = _division_;
    }
    return msg;
  },
};
